class Ammo
{
    field Array x_cord;
    field Array y_cord;
    field int loadingtimer;
    field int catridge_size;
    field int current_bullet;
    field int bullet_fin;
    field int x_ammo_stat,y_ammo_stat;//stores the address of last drawn ammo status symbol

    constructor Ammo new(int sz)
    {

        let x_cord = Array.new(sz);
        let y_cord = Array.new(sz);
        let catridge_size = sz;
        let current_bullet = 0;
        let bullet_fin = 0;
        do draw_ammo_status_gfx(sz);
        

        return this;

    }

    method void fire(int Ax,int Ay) //fires a new bullet at the given cordinate
    {
        var int i;
        var int loc;

        let i = 0;

        if(~(current_bullet = catridge_size))
        {
            let x_cord[current_bullet] = Ax;
            let y_cord[current_bullet] = Ay; 
            let loc = ((Ax * 32 ) + Ay);
            do Graphics.draw_ammo(loc);
            let current_bullet = current_bullet + 1;
            do clear_last_ammo_gfx();
        }

        return; // return value 1 means bullet fired successfully or 0 means catridge finished.
    }

    method void draw_update(Enemy e)
    {
        var int i;
        var int loc;
        var int enemy_hit;
        let i = 0;

        while(i < current_bullet & ~(bullet_fin = catridge_size))
        {

            if(~(x_cord[i] = 0)) // checks whether the ammo is not in use or not.
            {
                let loc = (((x_cord[i]) * 32 ) + y_cord[i]);

                do Graphics.clear_ammo(loc);
                let x_cord[i] = x_cord[i] - 5;
            }
            
            

            if(x_cord[i] > 0)
            {
                let loc = (((x_cord[i]) * 32 ) + y_cord[i]);
                let enemy_hit = e.check_hit(loc);
                if(enemy_hit = 1)
                {
                    let bullet_fin = bullet_fin + 1; //stores how many of the bullet is finished rendering
                    let x_cord[i] = 0; // 0 signifies ammo no longer in use.
                }
                else
                {
                    do Graphics.draw_ammo(loc);
                }
                
            }
            else
            {
                if(x_cord[i] < 0)
                {
                    let bullet_fin = bullet_fin + 1; //stores how many of the bullet is finished rendering
                    let x_cord[i] = 0; // 0 signifies ammo no longer in use.
                }

                
            }
            let i = i + 1;
        }

        if(bullet_fin = catridge_size)
        {
            do refill();
        }

        return;
    }

    method void refill()
    {
        let current_bullet = 0;
        let bullet_fin = 0;
        do draw_ammo_status_gfx(catridge_size);
        return;
    }

    method void draw_ammo_status_gfx(int n) //draws the remaining ammo you have in the ship
    {
        var int i;
        var int loc;
        let i = 0;
        let x_ammo_stat = 2;
        let y_ammo_stat = 0;
        

        while(i < n)
        {
            let loc = ((x_ammo_stat*32)+y_ammo_stat);
            do Graphics.ammo_status_draw(loc);
            let y_ammo_stat = y_ammo_stat + 1;
            let i = i + 1;
            if(y_ammo_stat = 5)
            {
                let x_ammo_stat = x_ammo_stat + 10;
                let y_ammo_stat = 0;
            }
        }

        let x_ammo_stat = x_ammo_stat - 10;
        let y_ammo_stat = 4;
        return;
    }

    method void clear_last_ammo_gfx()
    {
    
        var int loc;

        let loc = ((x_ammo_stat * 32) + y_ammo_stat);
        do Graphics.ammo_status_clear(loc);
        if(y_ammo_stat = 0)
        {
            let y_ammo_stat = 5;
            let x_ammo_stat = x_ammo_stat - 10;
        }
        let y_ammo_stat = y_ammo_stat - 1;
        return;
    }

}
    

